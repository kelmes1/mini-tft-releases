name: Notify over MQTT when file changes

on:
  push:
    branches:
      - main
    paths:
      - "mini-tft-esp32s3.bin"
  workflow_dispatch:

jobs:
  mqtt-notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm install mqtt puppeteer

      - name: Get latest release tag
        id: get_tag
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send MQTT message (with Puppeteer solving CF-Access)
        run: |
          node - <<'EOF'
          const puppeteer = require('puppeteer');
          const mqtt = require('mqtt');

          (async () => {
            // Launch headless browser
            const browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });
            const page = await browser.newPage();

            // Set Cloudflare Access headers
            await page.setExtraHTTPHeaders({
              'CF-Access-Client-Id': process.env.CF_ACCESS_CLIENT_ID,
              'CF-Access-Client-Secret': process.env.CF_ACCESS_CLIENT_SECRET
            });

            // Visit MQTT endpoint to get valid session
            await page.goto(process.env.MQTT_HOST.replace(/^wss:/, 'https:'));
            const cookies = await page.cookies();

            // Extract the CF_AppSession cookie
            const sessionCookie = cookies.find(c => c.name === 'CF_AppSession');

            await browser.close();

            if (!sessionCookie) {
              console.error("Failed to get CF_AppSession cookie");
              process.exit(1);
            }

            // Connect MQTT using session cookie in the WebSocket headers
            const options = {
              username: process.env.MQTT_USER,
              password: process.env.MQTT_PASSWORD,
              wsOptions: {
                headers: {
                  'Cookie': `${sessionCookie.name}=${sessionCookie.value}`,
                  'sec-websocket-protocol': 'mqtt'
                }
              }
            };

            const client = mqtt.connect(process.env.MQTT_HOST, options);

            client.on('connect', () => {
              client.publish(process.env.MQTT_PATH, process.env.RELEASE_TAG, {}, () => {
                console.log("Published:", process.env.RELEASE_TAG);
                client.end();
              });
            });

            client.on('error', (err) => {
              console.error("MQTT connection error:", err);
              process.exit(1);
            });
          })();
          EOF
        env:
          MQTT_HOST: ${{ secrets.MQTT_HOST }}
          MQTT_USER: ${{ secrets.MQTT_USER }}
          MQTT_PASSWORD: ${{ secrets.MQTT_PASSWORD }}
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
          RELEASE_TAG: ${{ steps.get_tag.outputs.tag }}
